/*
    This represents an adaption of the Aquery thesis/presentation examples.
*/


// loading data
<q>
n:`int$1e6;
Ticks:([]ID:n?`S`ACME`OTHER`CORP; date:n?.z.D; timestamp:n?.z.P; price:n?100.0);
pointDate:first 1?Ticks`date;
Ticks:`date`ID xasc Ticks;
TicksWithAttr:update ID:`g#asc ID from Ticks;
Portfolio:([]ID:`S`ACME`OTHER`CORP; position:1e4+4?1e6);
Packets:select from ([]src:n?100; dest:n?100; length:n?256; timestamp:.z.P+10*n?`int$1e9) where src<>dest;
Sales:update sales:count[i]?1e6 from ([]month:`month${neg[x]?x}1+`long$`month$.z.D);
TradedStocks:([]ID:n?`S`ACME`OTHER`CORP; date:n?.z.D);
HistoricQuotes:update ClosePrice:count[i]?100. from `ID`date xcol distinct TradedStocks;
base:([] ID:(count .Q.a)?`S`ACME`OTHER`CORP; name:`$'.Q.a)
</q>



/**********************************************************
***********Examples from aquery thesis*********************/

/* UNCHANGED */
/* pg 24 */
SELECT price
FROM Ticks
    ASSUMING ASC timestamp
WHERE ID = "ACME"

/* UNCHANGED */
/* pg 25, example 3.1 */
SELECT max(price - mins(price)) as max_profit
FROM Ticks
    ASSUMING ASC timestamp
WHERE ID="ACME" AND
    date = pointDate


/* MODIFIED:
    1 - convert 120 to nanoseconds
*/
/* pg 29, example 3.3 */
SELECT src, dest, avg(length) as len, count(timestamp) as ct
FROM Packets
    ASSUMING ASC src, DESC dest, ASC timestamp
GROUP BY src, dest, sums(deltas(timestamp) > (120 * 1000000000))

/* MODIFIED:
    - note that since we decided that aquery should treat selections as a sequence
     (as order of selections matters given the semantics of inter-row dependence produced by column-wise aggregates),
     I've modified this example to use & rather than AND, as & does break up our selection into a sequence, but rather tells
     aquery to treat it as 1 expression (similar to & vs , in q where clauses)
     */
/* pg 30, example 3.4 */
WITH
    averages (ID, date, timestamp, a21, a5) AS
    (SELECT ID, date, timestamp , avgs(21, price),
      avgs(5, price) FROM Ticks
        ASSUMING ASC ID, ASC timestamp
     GROUP BY ID)
 SELECT ID, date
 FROM FLATTEN(averages)
    ASSUMING ASC ID, ASC timestamp
 WHERE a21 > a5 &
       prev(a21) <= prev(a5) &
       prev(ID) = ID

/* MODIFIED:
    1 - changed Ticks t, Portfolio p to Ticks t INNER JOIN Portfolio p USING ID
*/
/* pg 32, example 3.5 */
SELECT t.ID as ID, last(10, price) as last_price
FROM Ticks t INNER JOIN Portfolio p USING ID
    ASSUMING ASC timestamp
GROUP BY t.ID

/* MODIFIED:
 1 - added explicit names to the projections in the
 temporary table
*/
/* pg 33, example 3.6 */
WITH
    OneDay AS
    (SELECT ID as ID, price as price, timestamp as timestamp
     FROM Ticks
        ASSUMING ASC timestamp
     WHERE date = pointDate)
 SELECT ID, count(timestamp) as ct
 FROM OneDay
    ASSUMING ASC timestamp
    WHERE ROWID < 1000
    GROUP BY ID

/**********************************************************
***********Examples from aquery presentation notes*********
**********************************************************/

/* UNCHANGED */
/* moving average over arrables*/
SELECT month, avgs(3, sales) as moving_sales
FROM Sales
ASSUMING ASC month

/* MODIFIED:
 1 - replaced INNER JOIN ON with INNER JOIN USING (which means I have also renamed
    the columns as necessary
*/
SELECT ID, avgs(10, hq.ClosePrice) as avg_price
FROM TradedStocks AS ts INNER JOIN
    HistoricQuotes AS hq
	USING (ID, date)
ASSUMING ASC date
GROUP BY ID //can use ID since both ts and hq have it and joined using (ts.ID = hq.ID = ID)


/* MODIFIED: replaced Ticks t, base b with t inner join b using ID
/* last price for a name query */
SELECT last(price) as last_price
FROM Ticks t INNER JOIN base b USING ID
    ASSUMING ASC name, ASC timestamp
WHERE name = "x"

// Testing push filters (TicksWithAttr.ID has attribute, and we test a non-equality selection)
SELECT ID, date, timestamp, price from TicksWithAttr t INNER JOIN Portfolio p USING ID WHERE ROWID < 1000

/**********************************************************
***********Miscellaneous Aquery Examples**********
**********************************************************/

/* function definition with local variables */
FUNCTION pythag(x, y) {
   sqr_x := x * x;
   sqr_y := y * y;
   sqrt(sqr_x + sqr_y)
 }

<q>.aq.q10:{pythag(3,4)}</q>

<q>
t1:([]c1:1 2 3; c2:10 20 30);
t2:([]c1:100 200 300; c2:1000 2000 3000);
tu1:([]c1:1 1 1 2 2 3 4 4; c2:10 10 20 30 30 60 70 80);
tu2:([]c1:100 -100 200 300; c2:20 30 10 40);
</q>

// inserts
CREATE TABLE aq_t1(c1 INT, c2 INT)

INSERT INTO aq_t1 ASSUMING ASC c1
  SELECT * FROM t2

INSERT INTO aq_t1(c2, c1) VALUES(-1, -2)

SELECT * FROM aq_t1

// updates
CREATE TABLE aq_tu1 AS
  SELECT * FROM tu1

UPDATE aq_tu1 SET c3 = last(sums(c2))
ASSUMING ASC c2
WHERE c1 < 3 GROUP BY c1, c2 HAVING count(c2) >= 2

SELECT * FROM aq_tu1

CREATE TABLE aq_tu2 as
  SELECT * FROM tu2

UPDATE aq_tu2 SET c3 = max(c2) WHERE c1 > 0

SELECT * FROM aq_tu2

// deletes
CREATE TABLE aq_td1 as
  SELECT * FROM tu1

DELETE FROM aq_td1 ASSUMING ASC c2 where c1 < 3 group by c1 having count(c2) > 1
SELECT * FROM aq_td1

CREATE TABLE aq_td2 as
  SELECT * FROM tu2

DELETE c2 FROM aq_td2

SELECT * FROM aq_td2
